# -*- coding: utf-8 -*-
"""ultimo feito dia 13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RsA9qlIzVG46ddpRm3HZs3A5O_D1fd7L
"""

pip install py3dbp

pip install plotly

from py3dbp import Packer, Bin, Item
packer = Packer()
def bin_packing(bin,caixas):
    packer = Packer()
    packer.add_bin(Bin('large-box', bin["altura"], bin["largura"], bin["profundidade"], 1000))

    for i, caixa in enumerate(caixas):
       packer.add_item(Item(f'caixa {i}', caixa["altura"], caixa["largura"], caixa["profundidade"], 1))

    packer.pack()

    responses = []
    for b in packer.bins:
        for item in b.items:

            responses.append(item.string())



    for item in b.unfitted_items:
      print("====> ", item.string())



    #TO-Do usar o caht chagpt para extrair os valores de x y e z para cada caixa do sexmeplo a segui ['caixa 0(1.000x1.000x1.000, weight: 1.000) pos([0, 0, 0]) rt(0) vol(1.000)']


    return responses

from py3dbp import Packer, Bin, Item
import re

def bin_packing(bin, caixas):
    packer = Packer()
    packer.add_bin(Bin('large-box', bin["altura"], bin["largura"], bin["profundidade"], 1000))

    for i, caixa in enumerate(caixas):
        packer.add_item(Item(f'caixa {i}', caixa["altura"], caixa["largura"], caixa["profundidade"], 1))

    packer.pack()

    responses = []

    for b in packer.bins:
        for item in b.items:
            responses.append(item.string())

    for item in b.unfitted_items:
        print("====> ", item.string())

    # Extrair os valores de x, y e z para cada caixa
    coordenadas_caixas = []
    for response in responses:
        # Usar expressão regular para extrair as coordenadas
        match = re.search(r'pos\((.*?)\)', response)
        if match:
            coordenadas_caixa = match.group(1)
            coordenadas_caixa = re.findall(r'-?\d+', coordenadas_caixa)  # Extrair números inteiros
            coordenadas_caixa = [int(coord) for coord in coordenadas_caixa]
            coordenadas_caixas.append(coordenadas_caixa)

    return coordenadas_caixas

# Exemplo de uso
bin = {"altura": 10000, "largura": 10000, "profundidade": 10000}
caixas = [
    {"altura": 1000, "largura": 1000, "profundidade": 1000},
    {"altura": 500, "largura": 500, "profundidade": 500},
    # Adicione mais caixas conforme necessário
]

coordenadas_caixas = bin_packing(bin, caixas)

for i, coordenadas in enumerate(coordenadas_caixas):
    print(f'Caixa {i} - Posição (x, y, z): {coordenadas}')

from py3dbp import Packer, Bin, Item
import re

def coletar_informacoes_caixa(numero_caixas):
    informacoes_caixas = []

    for i in range(numero_caixas):
        print(f"\nCaixa {i+1}:")
        altura = float(input("Qual é a altura da caixa em centímetros? "))
        largura = float(input("Qual é a largura da caixa em centímetros? "))
        profundidade = float(input("Qual é a profundidade da caixa em centímetros? "))
        peso = float(input("Qual é o peso da caixa em quilogramas? "))

        print("\nEm uma escala de 1 a 5, o quão frágil é a caixa?")
        while True:
            fragilidade = int(input("Digite um número de 1 a 5 (sendo 1 menos frágil e 5 mais frágil): "))
            if 1 <= fragilidade <= 5:
                break
            else:
                print("Valor inválido! Digite um número entre 1 e 5.")

        informacoes_caixa = {
            "altura": altura,
            "largura": largura,
            "profundidade": profundidade,
            "peso": peso,
            "fragilidade": fragilidade
        }

        informacoes_caixas.append(informacoes_caixa)

    return informacoes_caixas

def coletar_informacoes_bin():
    bin = {}
    altura = float(input("Qual é a altura do bin em centímetros? "))
    largura = float(input("Qual é a largura do bin em centímetros? "))
    profundidade = float(input("Qual é a profundidade do bin em centímetros? "))
    bin["altura"] = altura
    bin["largura"] = largura
    bin["profundidade"] = profundidade
    return bin

def bin_packing(bin, caixas):
    packer = Packer()
    packer.add_bin(Bin('large-box', bin["altura"], bin["largura"], bin["profundidade"], 1000))

    for i, caixa in enumerate(caixas):
        packer.add_item(Item(f'caixa {i}', caixa["altura"], caixa["largura"], caixa["profundidade"], 1))

    packer.pack()

    # Extrair as coordenadas das caixas empacotadas
    coordenadas_caixas = []
    for b in packer.bins:
        for item in b.items:
            response = item.string()
            # Usar expressão regular para extrair as coordenadas
            match = re.search(r'pos\[(.*?)\]', response)
            if match:
                coordenadas_caixa = match.group(1).split(',')
                coordenadas_caixa = [int(coord) for coord in coordenadas_caixa]
                coordenadas_caixas.append(coordenadas_caixa)

    return coordenadas_caixas

# Coletar informações sobre o recipiente (bin)
bin_info = coletar_informacoes_bin()

# Coletar informações sobre as caixas
num_caixas = int(input("Quantas caixas você deseja empacotar? "))
caixas_info = coletar_informacoes_caixa(num_caixas)

# Executar o empacotamento e extrair as coordenadas das caixas empacotadas
coordenadas_caixas = bin_packing(bin_info, caixas_info)

# Imprimir as coordenadas das caixas empacotadas
for i, coordenadas in enumerate(coordenadas_caixas):
    print(f'Caixa {i} - Posição (x, y, z): {coordenadas}')
1

from py3dbp import Packer, Bin, Item
import re

def coletar_informacoes_caixa(numero_caixas):
    informacoes_caixas = []

    for i in range(numero_caixas):
        print(f"\nCaixa {i+1}:")
        altura = float(input("Qual é a altura da caixa em centímetros? "))
        largura = float(input("Qual é a largura da caixa em centímetros? "))
        profundidade = float(input("Qual é a profundidade da caixa em centímetros? "))
        peso = float(input("Qual é o peso da caixa em quilogramas? "))

        print("\nEm uma escala de 1 a 5, o quão frágil é a caixa?")
        while True:
            fragilidade = int(input("Digite um número de 1 a 5 (sendo 1 menos frágil e 5 mais frágil): "))
            if 1 <= fragilidade <= 5:
                break
            else:
                print("Valor inválido! Digite um número entre 1 e 5.")

        informacoes_caixa = {
            "altura": altura,
            "largura": largura,
            "profundidade": profundidade,
            "peso": peso,
            "fragilidade": fragilidade
        }

        informacoes_caixas.append(informacoes_caixa)

    return informacoes_caixas

def coletar_informacoes_bin():
    bin = {}
    altura = float(input("Qual é a altura do bin em centímetros? "))
    largura = float(input("Qual é a largura do bin em centímetros? "))
    profundidade = float(input("Qual é a profundidade do bin em centímetros? "))
    bin["altura"] = altura
    bin["largura"] = largura
    bin["profundidade"] = profundidade
    return bin

def bin_packing(bin, caixas):
    packer = Packer()
    packer.add_bin(Bin('large-box', bin["altura"], bin["largura"], bin["profundidade"], 1000))

    for i, caixa in enumerate(caixas):
        packer.add_item(Item(f'caixa {i}', caixa["altura"], caixa["largura"], caixa["profundidade"], 1))

    packer.pack()

    responses = []

    for b in packer.bins:
        for item in b.items:
            responses.append(item.string())

    for item in b.unfitted_items:
        print("====> ", item.string())

    # Extrair os valores de x, y e z para cada caixa
    coordenadas_caixas = []
    for response in responses:
        # Usar expressão regular para extrair as coordenadas
        match = re.search(r'pos\((.*?)\)', response)
        if match:
            coordenadas_caixa = match.group(1)
            coordenadas_caixa = re.findall(r'-?\d+', coordenadas_caixa)  # Extrair números inteiros
            coordenadas_caixa = [int(coord) for coord in coordenadas_caixa]
            coordenadas_caixas.append(coordenadas_caixa)

    return coordenadas_caixas

# Coletar informações sobre o recipiente (bin)
bin_info = coletar_informacoes_bin()

# Coletar informações sobre as caixas
num_caixas = int(input("Quantas caixas você deseja empacotar? "))
caixas_info = coletar_informacoes_caixa(num_caixas)

# Executar o empacotamento e extrair as coordenadas das caixas empacotadas
coordenadas_caixas = bin_packing(bin_info, caixas_info)

# Imprimir as coordenadas das caixas empacotadas
for i, coordenadas in enumerate(coordenadas_caixas):
    print(f'Caixa {i} - Posição (x, y, z): {coordenadas}')

from py3dbp import Packer, Bin, Item
import re

# Função para coletar informações sobre as caixas
def coletar_informacoes_caixa(numero_caixas):
    informacoes_caixas = []

    for i in range(numero_caixas):
        print(f"\nCaixa {i+1}:")
        altura = float(input("Qual é a altura da caixa em centímetros? "))
        largura = float(input("Qual é a largura da caixa em centímetros? "))
        profundidade = float(input("Qual é a profundidade da caixa em centímetros (Z)? "))
        peso = float(input("Qual é o peso da caixa em quilogramas? "))

        print("\nEm uma escala de 1 a 5, o quão frágil é a caixa?")
        while True:
            fragilidade = int(input("Digite um número de 1 a 5 (sendo 1 menos frágil e 5 mais frágil): "))
            if 1 <= fragilidade <= 5:
                break
            else:
                print("Valor inválido! Digite um número entre 1 e 5.")

        informacoes_caixa = {
            "altura": altura,
            "largura": largura,
            "profundidade": profundidade,
            "peso": peso,
            "fragilidade": fragilidade

        }

        informacoes_caixas.append(informacoes_caixa)

    return informacoes_caixas

# Função para coletar informações sobre o recipiente (bin)
def coletar_informacoes_bin():
    bin = {}
    altura = float(input("Qual é a altura do bin em centímetros? "))
    largura = float(input("Qual é a largura do bin em centímetros? "))
    profundidade = float(input("Qual é a profundidade do bin em centímetros (Z)? "))
    peso = float(input("Qaul é o peso do seu bin em quilograma? "))
    bin["altura"] = altura
    bin["largura"] = largura
    bin["profundidade"] = profundidade
    bin["peso"] = peso
    return bin

# Função para empacotar as caixas
def bin_packing(bin, caixas):
    packer = Packer()
    packer.add_bin(Bin('large-box', bin["largura"], bin["altura"], bin["profundidade"], bin["peso"]))

    for i, caixa in enumerate(caixas):
        packer.add_item(Item(f'caixa {i}', caixa["largura"], caixa["altura"], caixa["profundidade"], caixa["peso"]))

    packer.pack()

    responses = []

    for b in packer.bins:
        for item in b.items:
            responses.append(item.string())

    for item in b.unfitted_items:
        print("====> ", item.string())

    # Extrair os valores de x, y e z para cada caixa
    coordenadas_caixas = []
    for response in responses:
        # Usar expressão regular para extrair as coordenadas
        match = re.search(r'pos\((.*?)\)', response)
        if match:
            coordenadas_caixa = match.group(1)
            coordenadas_caixa = re.findall(r'-?\d+', coordenadas_caixa)[:3]  # Extrair os três primeiros números inteiros
            coordenadas_caixa = [int(coord) for coord in coordenadas_caixa]
            coordenadas_caixas.append(coordenadas_caixa)

    return coordenadas_caixas

# Função principal para empacotar caixas
def empacotar_caixas():
    # Coletar informações sobre o recipiente (bin)
    bin_info = coletar_informacoes_bin()

    # Coletar informações sobre as caixas
    num_caixas = int(input("Quantas caixas você deseja empacotar? "))
    caixas_info = coletar_informacoes_caixa(num_caixas)

    # Executar o empacotamento
    coordenadas_caixas = bin_packing(bin_info, caixas_info)

    # Imprimir as coordenadas das caixas empacotadas
    for i, coordenadas in enumerate(coordenadas_caixas):
        print(f'Caixa {i} - Posição (x, y, z): {coordenadas}')

# Chamar a função principal para empacotar as caixas
empacotar_caixas()

from py3dbp import Packer, Bin, Item
import re

# Função para coletar informações sobre as caixas
def coletar_informacoes_caixa(numero_caixas):
    informacoes_caixas = []

    for i in range(numero_caixas):
        print(f"\nCaixa {i+1}:")
        altura = float(input("Qual é a altura da caixa em centímetros? "))
        largura = float(input("Qual é a largura da caixa em centímetros? "))
        profundidade = float(input("Qual é a profundidade da caixa em centímetros (Z)? "))
        peso = float(input("Qual é o peso da caixa em quilogramas? "))

        print("\nEm uma escala de 1 a 5, o quão frágil é a caixa?")
        while True:
            fragilidade = int(input("Digite um número de 1 a 5 (sendo 1 menos frágil e 5 mais frágil): "))
            if 1 <= fragilidade <= 5:
                break
            else:
                print("Valor inválido! Digite um número entre 1 e 5.")

        informacoes_caixa = {
            "altura": altura,
            "largura": largura,
            "profundidade": profundidade,
            "peso": peso,
            "fragilidade": fragilidade
        }

        informacoes_caixas.append(informacoes_caixa)

    return informacoes_caixas

# Função para coletar informações sobre o recipiente (bin) e calcular o peso do bin
def coletar_informacoes_bin(caixas):
    bin = {}
    altura = float(input("Qual é a altura do bin em centímetros? "))
    largura = float(input("Qual é a largura do bin em centímetros? "))
    profundidade = float(input("Qual é a profundidade do bin em centímetros (Z)? "))

    # Calcular o peso do bin como 10 vezes o peso da caixa mais pesada
    peso_caixa_mais_pesada = max(caixas, key=lambda x: x["peso"])["peso"]
    peso_bin = peso_caixa_mais_pesada * 10

    bin["altura"] = altura
    bin["largura"] = largura
    bin["profundidade"] = profundidade
    bin["peso"] = peso_bin

    return bin

# Função para empacotar as caixas
def bin_packing(bin, caixas):
    packer = Packer()
    packer.add_bin(Bin('large-box', bin["largura"], bin["altura"], bin["profundidade"], bin["peso"]))

    for i, caixa in enumerate(caixas):
        packer.add_item(Item(f'caixa {i}', caixa["largura"], caixa["altura"], caixa["profundidade"], caixa["peso"]))

    packer.pack()

    responses = []

    for b in packer.bins:
        for item in b.items:
            responses.append(item.string())

    for item in b.unfitted_items:
        print("====> ", item.string())

    # Extrair os valores de x, y e z para cada caixa
    coordenadas_caixas = []
    for response in responses:
        # Usar expressão regular para extrair as coordenadas
        match = re.search(r'pos\((.*?)\)', response)
        if match:
            coordenadas_caixa = match.group(1)
            coordenadas_caixa = re.findall(r'-?\d+', coordenadas_caixa)[:3]  # Extrair os três primeiros números inteiros
            coordenadas_caixa = [int(coord) for coord in coordenadas_caixa]
            coordenadas_caixas.append(coordenadas_caixa)

    return coordenadas_caixas

# Função principal para empacotar caixas
def empacotar_caixas():
    # Coletar informações sobre as caixas
    num_caixas = int(input("Quantas caixas você deseja empacotar? "))
    caixas_info = coletar_informacoes_caixa(num_caixas)

    # Coletar informações sobre o recipiente (bin) e calcular o peso do bin
    bin_info = coletar_informacoes_bin(caixas_info)

    # Executar o empacotamento
    coordenadas_caixas = bin_packing(bin_info, caixas_info)

    # Imprimir as coordenadas das caixas empacotadas
    for i, coordenadas in enumerate(coordenadas_caixas):
        print(f'Caixa {i} - Posição (x, y, z): {coordenadas}')

# Chamar a função principal para empacotar as caixas
empacotar_caixas()

def coletar_informacoes_caixa(numero_caixas):
    informacoes_caixas = []

    for i in range(numero_caixas):
        print(f"\nCaixa {i+1}:")
        altura = float(input("Qual é a altura da caixa em centímetros? "))
        largura = float(input("Qual é a largura da caixa em centímetros? "))
        profundidade = float(input("Qual é a profundidade da caixa em centímetros? "))
        peso = float(input("Qual é o peso da caixa em quilogramas? "))

        print("\nEm uma escala de 1 a 5, o quão frágil é a caixa?")
        while True:
            fragilidade = int(input("Digite um número de 1 a 5 (sendo 1 menos frágil e 5 mais frágil): "))
            if 1 <= fragilidade <= 5:
                break
            else:
                print("Valor inválido! Digite um número entre 1 e 5.")

        informacoes_caixa = {
            "altura": altura,
            "largura": largura,
            "profundidade": profundidade,
            "peso": peso,
            "fragilidade": fragilidade
        }

        informacoes_caixas.append(informacoes_caixa)

    return informacoes_caixas

def coletar_informacoes_bin():
    bin = {}
    altura = float(input("Qual é a altura do bin em centímetros? "))
    largura = float(input("Qual é a largura do bin em centímetros? "))
    profundidade = float(input("Qual é a profundidade do bin em centímetros? "))
    bin["altura"] = altura
    bin["largura"] = largura
    bin["profundidade"] = profundidade
    return bin

quantidade_caixas = int(input("Quantas caixas você gostaria de inserir? "))
bin = coletar_informacoes_bin()
caixas = coletar_informacoes_caixa(quantidade_caixas)
solution = bin_packing(bin,caixas)

import re

# Sua resposta
resposta = "caixa 0(1.000x1.000x1.000, weight: 1.000) pos([0, 0, 0]) rt(0) vol(1.000)"

# Usando uma expressão regular para extrair o conteúdo dentro de pos([])
posicao_match = re.search(r'pos\((.*?)\)', resposta)

if posicao_match:
    posicao = posicao_match.group(1)
    print(posicao)
else:
    print("Não foi encontrada uma posição.")

print(type(posicao))

import plotly.graph_objects as go

# Dimensões da caixa
x_length = 11000
y_length = 8500
z_length = 5500

# Pontos da caixa
x = [-x_length/2, -x_length/2, x_length/2, x_length/2, -x_length/2, -x_length/2, x_length/2, x_length/2]
y = [-y_length/2, y_length/2, y_length/2, -y_length/2, -y_length/2, y_length/2, y_length/2, -y_length/2]
z = [-z_length/2, -z_length/2, -z_length/2, -z_length/2, z_length/2, z_length/2, z_length/2, z_length/2]

# Definição das arestas da caixa
edges = [
    [0, 1], [1, 2], [2, 3], [3, 0],  # Arestas da face inferior
    [4, 5], [5, 6], [6, 7], [7, 4],  # Arestas da face superior
    [0, 4], [1, 5], [2, 6], [3, 7],   # Arestas verticais
    [4, 6], [5, 7]                    # Arestas horizontais
]

# Criação do gráfico 3D interativo com a caixa
fig = go.Figure(data=[
    go.Scatter3d(
        x=x,
        y=y,
        z=z,
        mode='lines',
        line=dict(color='blue', width=3)
    )
])

# Adição das arestas extras para conectar a caixa
for edge in edges:
    x_edge = [x[edge[0]], x[edge[1]]]
    y_edge = [y[edge[0]], y[edge[1]]]
    z_edge = [z[edge[0]], z[edge[1]]]
    fig.add_trace(go.Scatter3d(
        x=x_edge,
        y=y_edge,
        z=z_edge,
        mode='lines',
        line=dict(color='blue', width=3)
    ))

# Configuração dos rótulos dos eixos
fig.update_layout(
    scene=dict(
        xaxis=dict(title='Eixo X', range=[-15000, 15000]),
        yaxis=dict(title='Eixo Y', range=[-10000, 10000]),
        zaxis=dict(title='Eixo Z', range=[-7500, 7500]),
        aspectmode='cube'
    )
)

# Exibição do gráfico interativo
fig.show()

import plotly.graph_objects as go

# Seu código para criar a caixa e o gráfico 3D

# Extrair a posição da caixa a partir das variáveis x, y, z
posicao_caixa = (x[0], y[0], z[0])  # Pode ser qualquer um dos vértices da caixa, pois são todos iguais

# Formatar a posição como "x, y, z"
posicao_formatada = f"{posicao_caixa[0]}, {posicao_caixa[1]}, {posicao_caixa[2]}"

# Imprimir a posição formatada
print("Posição da caixa:", posicao_formatada)

import plotly.graph_objects as go

# Dimensões da caixa
x_length = 11000
y_length = 8500
z_length = 5500

# Pontos da caixa
x = [-x_length/2, -x_length/2, x_length/2, x_length/2, -x_length/2, -x_length/2, x_length/2, x_length/2]
y = [-y_length/2, y_length/2, y_length/2, -y_length/2, -y_length/2, y_length/2, y_length/2, -y_length/2]
z = [-z_length/2, -z_length/2, -z_length/2, -z_length/2, z_length/2, z_length/2, z_length/2, z_length/2]

# Definição das arestas da caixa
edges = [
    [0, 1], [1, 2], [2, 3], [3, 0],  # Arestas da face inferior
    [4, 5], [5, 6], [6, 7], [7, 4],  # Arestas da face superior
    [0, 4], [1, 5], [2, 6], [3, 7],   # Arestas verticais
    [4, 6], [5, 7]                    # Arestas horizontais
]

# Criação do gráfico 3D interativo com a caixa
fig = go.Figure()

# Adição das arestas da caixa
for edge in edges:
    x_edge = [x[edge[0]], x[edge[1]]]
    y_edge = [y[edge[0]], y[edge[1]]]
    z_edge = [z[edge[0]], z[edge[1]]]
    fig.add_trace(go.Scatter3d(
        x=x_edge,
        y=y_edge,
        z=z_edge,
        mode='lines',
        line=dict(color='blue', width=3)
    ))

# Configuração dos rótulos dos eixos
fig.update_layout(
    scene=dict(
        xaxis=dict(title='Eixo X', range=[-15000, 15000]),
        yaxis=dict(title='Eixo Y', range=[-10000, 10000]),
        zaxis=dict(title='Eixo Z', range=[-7500, 7500]),
        aspectmode='cube'
    )
)

# Posição formatada do primeiro código
posicao_formatada = "0, 0, 0"



# Exibição do gráfico interativo
fig.show()